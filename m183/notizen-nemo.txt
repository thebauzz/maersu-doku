BLOCK 01
**********************************
Sicherheit ist kein Zustand sondern ein Prozess			//Wichtig

Vorstellung:
*************

Gabriel:
********
Gabriel SchafflŸtzel
17 Jahre

Hobbies:
BŸcher Lesen

Praktikum:
Balzano


NoŽ:
********
NoŽ LŸthold
17 Jahre

Hobbies:
Karate

Praktikum:
Balzano


M-183:
********
Buch:
2010

HANOKS:
relevante stichwšrter z.b sicherheitslŸcken logs verschlŸsselung
audit-trails?
erwartung: wichtig 

CERT
CSIRT
Phishing

********
Kurzer Phishing test von google gemacht







BLOCK 02
**********************************
Bedrohung --> Schwachstelle --> GefŠrdung --> Ressource
Keine KriminalitŠt = keine Sicherheit (bzw. kein bedŸrfniss schwachstellen zu beheben)

Eintretungswahrscheinlichkeit * Schadensausmasse

z.B. 	meteoreinschlag eintretungswahrscheinlichkeit = minimal (z.B. 0.1%)
	schadensausmasse = maximal (100%)
	0.1 * 100 = 10 = zu kleines risiko

Markus Lanz sendung
********
Linus Neumann
********

REFERATE MIT DEMOS
********
DVWA Webapp - DAMM VULNERABLE WEB APP
	(In PHP/MYSQL geamch, wird benutzt um legal zu hacken ausserdem hilft es webentwickler der prozess des sichern einer webapplikation.)
Regular expressions
*SQL Injection
*Cross Site Scripting (XSS)
*CSRF - Cross-Site-Request-Forgery
Defensives Programmieren
die Kali Linux Plattform
	(das OWASP-Projekt)
	(HZ1: MELANI, KOBIK, BSI, SWITCH-CERT)







BLOCK 03
**********************************
php:
	trim
	htmlspecialchars
	stripslashes

PrŠsentationen vorbereitung 
Nemo (DVWA)
MŠrsu (Kali Linux)



BLOCK 04
**********************************
PrŠsentation:
	-DVWA

DVWA anschauen

PrŠsentation:
	-SQL-Injections
	-CROSS SITE SCRIPTING (XSS)
	-CROSS SITE REQUEST FORGERY (CSRF)

XSS Aufgaben von Max

PrŠsentation:
	-Kali Linux + Beispiel
	-REGEX



BLOCK 04
**********************************
PDO
Repetition formular umgehen goldboden.ch/m183/case1/
Risikomanagement

Defensives programmieren:
	- Alle Layer der anwendung müssen betrachtet werden - es gibt kein vertrauen
	- Positives Sicherheitsmodell verwenden (Whitelisting)
	- Nur mit Least Privilege arbeiten
	- Verhindere "security by obscurity" (Offenes Design verwenden) (z.B. Zertifikat) (keine eigenen sachen verwenden, erweckt neugierigkeit)
	- Einfache, überschaubare Sicherheitsmechanismen verwenden

	- Unerlaubte Zugriffe / Handlungen aufzeichen
	- Vertraue nicht der Infrastruktur
	- Vertraue nicht den Services
	- "All input is evil"

Kali Linux

Zwei Faktoren  Authentifizierung
Faktoren:
	Besitz: Hardware-Token, Bankkarte, Schlüssel

	Wissen: kennwort, einmalkennwort, Persönliche identifikationsnummer (PIN), Transaktionsnummer (TAN)

	Sein (Inherenz): Fingerabdruck, Muster eine Regenbogenhaut (Iris Erkennung), menschliche Stimme

OWASP (Open Webapp security Project)
	Achtung: Open? Wer steckt dahinter?
	OWASP top 10
	OWASP Cheat Sheet
	OWASP WebGoat Project
